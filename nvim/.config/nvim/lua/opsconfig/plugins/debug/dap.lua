return {
  -- NOTE: ÔêÉ Depurador ass√≠ncrono para Neovim.
  -- ÔÉß Suporte para depura√ß√£o de v√°rias linguagens via adaptadores DAP.
  -- Ôë™ Permite adicionar breakpoints, inspecionar vari√°veis e controlar a execu√ß√£o do c√≥digo.
  -- ÔÄì Altamente configur√°vel e extens√≠vel com integra√ß√µes como nvim-dap-ui.
  -- ÔÇõ Reposit√≥rio: https://github.com/mfussenegger/nvim-dap
  'mfussenegger/nvim-dap',

  enabled = vim.g.opsconfig.plugins.nvim_dap
    and vim.g.opsconfig.plugins.nvim_dap_ui
    and vim.g.opsconfig.plugins.nvim_nio
    and vim.g.opsconfig.plugins.nvim_dap_virtual_text
    and vim.g.opsconfig.plugins.telescope_dap_nvim
    and vim.g.opsconfig.plugins.mason_nvim
    and vim.g.opsconfig.plugins.mason_nvim_dap_nvim,

  -- Dependencies {{{

  dependencies = {
    -- NOTE: ÔêÉ Interface gr√°fica para nvim-dap no Neovim.
    -- ÔÉß Exibe vari√°veis, breakpoints, pilha de chamadas e consoles de depura√ß√£o.
    -- Ôë™ Facilita a intera√ß√£o com o depurador atrav√©s de janelas flutuantes e pain√©is.
    -- ÔÄì Requer nvim-dap para funcionar corretamente.
    -- ÔÇõ Reposit√≥rio: https://github.com/rcarriga/nvim-dap-ui
    {
      'rcarriga/nvim-dap-ui',
      enabled = true,
    },

    -- NOTE: ÔêÉ Biblioteca ass√≠ncrona para Neovim em Lua.
    -- ÔÉß Fornece uma API para manipula√ß√£o de eventos ass√≠ncronos e IO.
    -- Ôë™ Utilizada internamente por plugins como neotest.
    -- ÔÄì Ajuda no desenvolvimento de plugins com melhor gerenciamento de concorr√™ncia.
    -- ÔÇõ Reposit√≥rio: https://github.com/nvim-neotest/nvim-nio
    {
      'nvim-neotest/nvim-nio',
      enabled = true,
    },

    {
      -- NOTE: ÔêÉ Exibe vari√°veis e express√µes diretamente no c√≥digo durante a depura√ß√£o.
      -- ÔÉß Integra√ß√£o com nvim-dap para mostrar valores inline.
      -- Ôë™ Atualiza√ß√£o em tempo real conforme a execu√ß√£o do c√≥digo avan√ßa.
      -- ÔÄì Requer nvim-dap e nvim-treesitter para funcionar corretamente.
      -- ÔÇõ Reposit√≥rio: https://github.com/theHamsta/nvim-dap-virtual-text
      'theHamsta/nvim-dap-virtual-text',
      enabled = true,
    },

    -- NOTE: Ôíá Gerencia a instala√ß√£o de LSPs, DAPs, linters e formatters no Neovim.
    -- Ôë™ Fornece uma interface simples para instalar e atualizar ferramentas externas.
    -- ÔÉß Integra-se com lspconfig e null-ls para configura√ß√£o autom√°tica.
    -- ÔÇõ Reposit√≥rio: https://github.com/williamboman/mason.nvim
    {
      'williamboman/mason.nvim',
      enabled = true,
    },

    -- NOTE: ÔêÉ Integra√ß√£o entre Mason e nvim-dap no Neovim.
    -- ÔÉß Gerencia automaticamente depuradores para diversas linguagens.
    -- Ôë™ Instala e configura adaptadores DAP via Mason.
    -- ÔÄì Facilita a configura√ß√£o do nvim-dap sem precisar instalar manualmente os adaptadores.
    -- ÔÇõ Reposit√≥rio: https://github.com/jay-babu/mason-nvim-dap.nvim
    {
      'jay-babu/mason-nvim-dap.nvim',
      enabled = true,
    },

    -- NOTE: ÔÜà Integra√ß√£o do DAP (Debug Adapter Protocol) com Telescope.
    -- ÔÉß Facilita a navega√ß√£o por breakpoints, frames, threads e vari√°veis.
    -- Ôë™ Melhora o fluxo de depura√ß√£o com buscas r√°pidas e eficientes.
    -- ÔÄì Configur√°vel, suportando filtros e atalhos personalizados.
    -- ÔÇõ Reposit√≥rio: https://github.com/nvim-telescope/telescope-dap.nvim
    {
      'nvim-telescope/telescope-dap.nvim',
      enabled = true,
    },
    -- NOTE: ÔêÉ Suporte para depura√ß√£o de Go no Neovim com nvim-dap.
    -- ÔÉß Configura automaticamente o adaptador DAP para Go (delve).
    -- Ôë™ Permite adicionar breakpoints, inspecionar vari√°veis e controlar a execu√ß√£o.
    -- ÔÄì Requer nvim-dap e Delve (dlv) instalado no sistema.
    -- ÔÇõ Reposit√≥rio: https://github.com/leoluz/nvim-dap-go
    {
      'leoluz/nvim-dap-go',
      enabled = vim.g.opsconfig.plugins.nvim_dap_go,
      cond = vim.g.opsconfig.global.languages.go.enabled and vim.g.opsconfig.global.languages.go.delve,
    },
  },

  -- }}}

  -- Config {{{

  config = function()
    local dap = require('dap')
    local dapui = require('dapui')
    local mason = require('mason-nvim-dap')

    require('telescope').load_extension('dap')

    -- DAP {{{

    dap.listeners.after.event_initialized['dapui_config'] = dapui.open
    dap.listeners.before.event_terminated['dapui_config'] = dapui.close
    dap.listeners.before.event_exited['dapui_config'] = dapui.close

    require('opsconfig.plugins.debug.languages.go')
    require('opsconfig.plugins.debug.languages.php')

    -- }}}

    -- DAP UI {{{

    dapui.setup({
      icons = {
        expanded = '‚ñæ',
        collapsed = '‚ñ∏',
        current_frame = '*',
      },

      controls = {
        icons = {
          pause = '‚è∏',
          play = '‚ñ∂',
          step_into = '‚èé',
          step_over = '‚è≠',
          step_out = '‚èÆ',
          step_back = 'b',
          run_last = '‚ñ∂‚ñ∂',
          terminate = '‚èπ',
          disconnect = '‚èè',
        },
      },
    })

    -- }}}

    -- Mason DAP {{{

    mason.setup({
      automatic_installation = true,

      handlers = {},

      ensure_installed = {
        'delve',
        'php-debug-adapter',
      },
    })

    -- }}}

    -- Keybindings {{{
    local wk = require('which-key')
    local dap_telescope = require('telescope').extensions.dap

    wk.add({
      { '<leader>d', group = 'Debugging (DAP)', icon = 'ÔÜà' },

      -- Execu√ß√£o e Controle do Debugger
      {
        '<F5>',
        dap.continue,
        desc = 'Debug: Start/Continue',
        icon = { color = 'blue', icon = 'ÔÑë' },
      },
      {
        '<F1>',
        dap.step_into,
        desc = 'Debug: Step Into',
        icon = { color = 'yellow', icon = 'Û∞Üπ' },
      },
      {
        '<F2>',
        dap.step_over,
        desc = 'Debug: Step Over',
        icon = { color = 'yellow', icon = 'ÓÆû' },
      },
      {
        '<F3>',
        dap.step_out,
        desc = 'Debug: Step Out',
        icon = { color = 'yellow', icon = 'Û∞Ü∏' },
      },
      {
        '<F4>',
        dap.terminate,
        desc = 'Debug: Stop Debugging',
        icon = { color = 'red', icon = 'Û∞Öñ' },
      },

      -- UI do Debugger
      {
        '<F7>',
        dapui.toggle,
        desc = 'Debug: Toggle UI',
        icon = { color = 'blue', icon = 'Û∞ç∞' },
      },
      {
        '<F8>',
        dapui.eval,
        desc = 'Debug: Evaluate Expression',
        icon = { color = 'cyan', icon = 'Ôá¨' },
      },

      -- Breakpoints e Configura√ß√£o
      {
        '<leader>db',
        dap.toggle_breakpoint,
        desc = '[D]ebug: Toggle [B]reakpoint',
        icon = { color = 'red', icon = 'ÔÑë' },
      },
      {
        '<leader>dB',
        function()
          dap.set_breakpoint(vim.fn.input('Breakpoint condition: '))
        end,
        desc = '[D]ebug: Set Conditional [B]reakpoint',
        icon = { color = 'red', icon = 'Û∞øÅ' },
      },

      -- Controle da Sess√£o de Debugging
      {
        '<leader>dr',
        dap.restart,
        desc = '[D]ebug: [R]estart',
        icon = { color = 'orange', icon = 'Û∞úâ' },
      },
      {
        '<leader>dq',
        dap.terminate,
        desc = '[D]ebug: [Q]uit',
        icon = { color = 'red', icon = 'Û∞Öñ' },
      },
      {
        '<leader>de',
        dapui.eval,
        desc = '[D]ebug: [E]valuate Expression',
        icon = { color = 'cyan', icon = 'Ôá¨' },
      },
      {
        '<leader>du',
        dapui.toggle,
        desc = '[D]ebug: Toggle [U]I',
        icon = { color = 'blue', icon = 'Û∞ç∞' },
      },

      -- üîç Integra√ß√£o com Telescope
      {
        '<leader>ds',
        dap_telescope.commands,
        desc = '[D]ebug: [S]how Available Commands',
        icon = { color = 'cyan', icon = 'Ôê¢' },
      },
      {
        '<leader>dl',
        dap_telescope.list_breakpoints,
        desc = '[D]ebug: [L]ist Breakpoints',
        icon = { color = 'yellow', icon = 'Û∞ØÜ' },
      },
      {
        '<leader>dv',
        dap_telescope.variables,
        desc = '[D]ebug: Show [V]ariables',
        icon = { color = 'blue', icon = 'Ôúò' },
      },
      {
        '<leader>df',
        dap_telescope.frames,
        desc = '[D]ebug: Show Stack [F]rames',
        icon = { color = 'purple', icon = 'Û∞´ë' },
      },
    })
    -- }}}
  end,

  -- }}}
}
